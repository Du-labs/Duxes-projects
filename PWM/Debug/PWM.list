
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020b4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002260  08002260  00003260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002270  08002270  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002270  08002270  00003270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002278  08002278  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002278  08002278  00003278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800227c  0800227c  0000327c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002280  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000068  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000082ea  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014a7  00000000  00000000  0000c326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0000d7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000747  00000000  00000000  0000e140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222f6  00000000  00000000  0000e887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a211  00000000  00000000  00030b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3e4c  00000000  00000000  0003ad8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ebda  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002760  00000000  00000000  0010ec20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00111380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002248 	.word	0x08002248

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002248 	.word	0x08002248

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fa09 	bl	8000934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f82b 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f8eb 	bl	8000700 <MX_GPIO_Init>
  MX_TIM2_Init();
 800052a:	f000 f891 	bl	8000650 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800052e:	2100      	movs	r1, #0
 8000530:	4811      	ldr	r0, [pc, #68]	@ (8000578 <main+0x60>)
 8000532:	f001 f9db 	bl	80018ec <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i=0; i<255; i++)
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	e009      	b.n	8000550 <main+0x38>
	  {
		 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
 800053c:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <main+0x60>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	635a      	str	r2, [r3, #52]	@ 0x34
         HAL_Delay(5);
 8000544:	2005      	movs	r0, #5
 8000546:	f000 fa67 	bl	8000a18 <HAL_Delay>
	  for(int i=0; i<255; i++)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3301      	adds	r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2bfe      	cmp	r3, #254	@ 0xfe
 8000554:	ddf2      	ble.n	800053c <main+0x24>
	  }
	  for(int i=255; i>0; i--)
 8000556:	23ff      	movs	r3, #255	@ 0xff
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	e009      	b.n	8000570 <main+0x58>
	 	  {
	 		 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <main+0x60>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	635a      	str	r2, [r3, #52]	@ 0x34
	          HAL_Delay(5);
 8000564:	2005      	movs	r0, #5
 8000566:	f000 fa57 	bl	8000a18 <HAL_Delay>
	  for(int i=255; i>0; i--)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	3b01      	subs	r3, #1
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	dcf2      	bgt.n	800055c <main+0x44>
	  for(int i=0; i<255; i++)
 8000576:	e7de      	b.n	8000536 <main+0x1e>
 8000578:	20000028 	.word	0x20000028

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	@ 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	@ 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fe30 	bl	80021f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b28      	ldr	r3, [pc, #160]	@ (8000648 <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	4a27      	ldr	r2, [pc, #156]	@ (8000648 <SystemClock_Config+0xcc>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b0:	4b25      	ldr	r3, [pc, #148]	@ (8000648 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b22      	ldr	r3, [pc, #136]	@ (800064c <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005c8:	4a20      	ldr	r2, [pc, #128]	@ (800064c <SystemClock_Config+0xd0>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005f4:	2348      	movs	r3, #72	@ 0x48
 80005f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fcbd 	bl	8000f84 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000610:	f000 f89e 	bl	8000750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2102      	movs	r1, #2
 8000630:	4618      	mov	r0, r3
 8000632:	f000 ff1f 	bl	8001474 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800063c:	f000 f888 	bl	8000750 <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3750      	adds	r7, #80	@ 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000672:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <MX_TIM2_Init+0xac>)
 8000674:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000678:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <MX_TIM2_Init+0xac>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <MX_TIM2_Init+0xac>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000686:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <MX_TIM2_Init+0xac>)
 8000688:	22ff      	movs	r2, #255	@ 0xff
 800068a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068c:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <MX_TIM2_Init+0xac>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <MX_TIM2_Init+0xac>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000698:	4818      	ldr	r0, [pc, #96]	@ (80006fc <MX_TIM2_Init+0xac>)
 800069a:	f001 f8d7 	bl	800184c <HAL_TIM_PWM_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80006a4:	f000 f854 	bl	8000750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4619      	mov	r1, r3
 80006b6:	4811      	ldr	r0, [pc, #68]	@ (80006fc <MX_TIM2_Init+0xac>)
 80006b8:	f001 fd1e 	bl	80020f8 <HAL_TIMEx_MasterConfigSynchronization>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80006c2:	f000 f845 	bl	8000750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c6:	2360      	movs	r3, #96	@ 0x60
 80006c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	4619      	mov	r1, r3
 80006dc:	4807      	ldr	r0, [pc, #28]	@ (80006fc <MX_TIM2_Init+0xac>)
 80006de:	f001 f9cd 	bl	8001a7c <HAL_TIM_PWM_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80006e8:	f000 f832 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006ec:	4803      	ldr	r0, [pc, #12]	@ (80006fc <MX_TIM2_Init+0xac>)
 80006ee:	f000 f87d 	bl	80007ec <HAL_TIM_MspPostInit>

}
 80006f2:	bf00      	nop
 80006f4:	3728      	adds	r7, #40	@ 0x28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000028 	.word	0x20000028

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_GPIO_Init+0x4c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a0f      	ldr	r2, [pc, #60]	@ (800074c <MX_GPIO_Init+0x4c>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <MX_GPIO_Init+0x4c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_GPIO_Init+0x4c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a08      	ldr	r2, [pc, #32]	@ (800074c <MX_GPIO_Init+0x4c>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_GPIO_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <Error_Handler+0x8>

0800075c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	4a0f      	ldr	r2, [pc, #60]	@ (80007a8 <HAL_MspInit+0x4c>)
 800076c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000770:	6453      	str	r3, [r2, #68]	@ 0x44
 8000772:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <HAL_MspInit+0x4c>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000786:	4a08      	ldr	r2, [pc, #32]	@ (80007a8 <HAL_MspInit+0x4c>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078c:	6413      	str	r3, [r2, #64]	@ 0x40
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <HAL_MspInit+0x4c>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007bc:	d10d      	bne.n	80007da <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c6:	4a08      	ldr	r2, [pc, #32]	@ (80007e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800080c:	d11d      	bne.n	800084a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <HAL_TIM_MspPostInit+0x68>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a0f      	ldr	r2, [pc, #60]	@ (8000854 <HAL_TIM_MspPostInit+0x68>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <HAL_TIM_MspPostInit+0x68>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800082a:	2301      	movs	r3, #1
 800082c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800083a:	2301      	movs	r3, #1
 800083c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4619      	mov	r1, r3
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <HAL_TIM_MspPostInit+0x6c>)
 8000846:	f000 f9f1 	bl	8000c2c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40020000 	.word	0x40020000

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <NMI_Handler+0x4>

08000864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <MemManage_Handler+0x4>

08000874 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <UsageFault_Handler+0x4>

08000884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b2:	f000 f891 	bl	80009d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <SystemInit+0x20>)
 80008c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008c6:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <SystemInit+0x20>)
 80008c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80008e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000918 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008e4:	f7ff ffea 	bl	80008bc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e8:	480c      	ldr	r0, [pc, #48]	@ (800091c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ea:	490d      	ldr	r1, [pc, #52]	@ (8000920 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000900:	4c0a      	ldr	r4, [pc, #40]	@ (800092c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800090e:	f001 fc77 	bl	8002200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000912:	f7ff fe01 	bl	8000518 <main>
  bx  lr    
 8000916:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000918:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800091c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000920:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000924:	08002280 	.word	0x08002280
  ldr r2, =_sbss
 8000928:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800092c:	20000074 	.word	0x20000074

08000930 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC_IRQHandler>
	...

08000934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000938:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <HAL_Init+0x40>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0d      	ldr	r2, [pc, #52]	@ (8000974 <HAL_Init+0x40>)
 800093e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000942:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000944:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <HAL_Init+0x40>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a0a      	ldr	r2, [pc, #40]	@ (8000974 <HAL_Init+0x40>)
 800094a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800094e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000950:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <HAL_Init+0x40>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a07      	ldr	r2, [pc, #28]	@ (8000974 <HAL_Init+0x40>)
 8000956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800095a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f931 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000962:	200f      	movs	r0, #15
 8000964:	f000 f808 	bl	8000978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000968:	f7ff fef8 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023c00 	.word	0x40023c00

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <HAL_InitTick+0x54>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <HAL_InitTick+0x58>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f93b 	bl	8000c12 <HAL_SYSTICK_Config>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00e      	b.n	80009c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d80a      	bhi.n	80009c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f000 f911 	bl	8000bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b8:	4a06      	ldr	r2, [pc, #24]	@ (80009d4 <HAL_InitTick+0x5c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	e000      	b.n	80009c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000004 	.word	0x20000004

080009d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_IncTick+0x20>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_IncTick+0x24>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a04      	ldr	r2, [pc, #16]	@ (80009fc <HAL_IncTick+0x24>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000070 	.word	0x20000070

08000a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return uwTick;
 8000a04:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <HAL_GetTick+0x14>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000070 	.word	0x20000070

08000a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a20:	f7ff ffee 	bl	8000a00 <HAL_GetTick>
 8000a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a30:	d005      	beq.n	8000a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a32:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <HAL_Delay+0x44>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a3e:	bf00      	nop
 8000a40:	f7ff ffde 	bl	8000a00 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d8f7      	bhi.n	8000a40 <HAL_Delay+0x28>
  {
  }
}
 8000a50:	bf00      	nop
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000008 	.word	0x20000008

08000a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a92:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aac:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	f003 0307 	and.w	r3, r3, #7
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	@ (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	@ (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	@ 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	bf28      	it	cs
 8000b36:	2304      	movcs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d902      	bls.n	8000b48 <NVIC_EncodePriority+0x30>
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3b03      	subs	r3, #3
 8000b46:	e000      	b.n	8000b4a <NVIC_EncodePriority+0x32>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43da      	mvns	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	4313      	orrs	r3, r2
         );
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3724      	adds	r7, #36	@ 0x24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b90:	d301      	bcc.n	8000b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00f      	b.n	8000bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <SysTick_Config+0x40>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f7ff ff8e 	bl	8000ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <SysTick_Config+0x40>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <SysTick_Config+0x40>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff47 	bl	8000a60 <__NVIC_SetPriorityGrouping>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bec:	f7ff ff5c 	bl	8000aa8 <__NVIC_GetPriorityGrouping>
 8000bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f7ff ff8e 	bl	8000b18 <NVIC_EncodePriority>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5d 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffb0 	bl	8000b80 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	@ 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
 8000c46:	e177      	b.n	8000f38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	f040 8166 	bne.w	8000f32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d005      	beq.n	8000c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d130      	bne.n	8000ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	2203      	movs	r2, #3
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4013      	ands	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	091b      	lsrs	r3, r3, #4
 8000cca:	f003 0201 	and.w	r2, r3, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d017      	beq.n	8000d1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d123      	bne.n	8000d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	08da      	lsrs	r2, r3, #3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3208      	adds	r2, #8
 8000d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	f003 0307 	and.w	r3, r3, #7
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	691a      	ldr	r2, [r3, #16]
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	08da      	lsrs	r2, r3, #3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3208      	adds	r2, #8
 8000d6a:	69b9      	ldr	r1, [r7, #24]
 8000d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0203 	and.w	r2, r3, #3
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f000 80c0 	beq.w	8000f32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b66      	ldr	r3, [pc, #408]	@ (8000f50 <HAL_GPIO_Init+0x324>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	4a65      	ldr	r2, [pc, #404]	@ (8000f50 <HAL_GPIO_Init+0x324>)
 8000dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc2:	4b63      	ldr	r3, [pc, #396]	@ (8000f50 <HAL_GPIO_Init+0x324>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dce:	4a61      	ldr	r2, [pc, #388]	@ (8000f54 <HAL_GPIO_Init+0x328>)
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a58      	ldr	r2, [pc, #352]	@ (8000f58 <HAL_GPIO_Init+0x32c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d037      	beq.n	8000e6a <HAL_GPIO_Init+0x23e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a57      	ldr	r2, [pc, #348]	@ (8000f5c <HAL_GPIO_Init+0x330>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d031      	beq.n	8000e66 <HAL_GPIO_Init+0x23a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a56      	ldr	r2, [pc, #344]	@ (8000f60 <HAL_GPIO_Init+0x334>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d02b      	beq.n	8000e62 <HAL_GPIO_Init+0x236>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a55      	ldr	r2, [pc, #340]	@ (8000f64 <HAL_GPIO_Init+0x338>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d025      	beq.n	8000e5e <HAL_GPIO_Init+0x232>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a54      	ldr	r2, [pc, #336]	@ (8000f68 <HAL_GPIO_Init+0x33c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d01f      	beq.n	8000e5a <HAL_GPIO_Init+0x22e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a53      	ldr	r2, [pc, #332]	@ (8000f6c <HAL_GPIO_Init+0x340>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d019      	beq.n	8000e56 <HAL_GPIO_Init+0x22a>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a52      	ldr	r2, [pc, #328]	@ (8000f70 <HAL_GPIO_Init+0x344>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d013      	beq.n	8000e52 <HAL_GPIO_Init+0x226>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a51      	ldr	r2, [pc, #324]	@ (8000f74 <HAL_GPIO_Init+0x348>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d00d      	beq.n	8000e4e <HAL_GPIO_Init+0x222>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a50      	ldr	r2, [pc, #320]	@ (8000f78 <HAL_GPIO_Init+0x34c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d007      	beq.n	8000e4a <HAL_GPIO_Init+0x21e>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4f      	ldr	r2, [pc, #316]	@ (8000f7c <HAL_GPIO_Init+0x350>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d101      	bne.n	8000e46 <HAL_GPIO_Init+0x21a>
 8000e42:	2309      	movs	r3, #9
 8000e44:	e012      	b.n	8000e6c <HAL_GPIO_Init+0x240>
 8000e46:	230a      	movs	r3, #10
 8000e48:	e010      	b.n	8000e6c <HAL_GPIO_Init+0x240>
 8000e4a:	2308      	movs	r3, #8
 8000e4c:	e00e      	b.n	8000e6c <HAL_GPIO_Init+0x240>
 8000e4e:	2307      	movs	r3, #7
 8000e50:	e00c      	b.n	8000e6c <HAL_GPIO_Init+0x240>
 8000e52:	2306      	movs	r3, #6
 8000e54:	e00a      	b.n	8000e6c <HAL_GPIO_Init+0x240>
 8000e56:	2305      	movs	r3, #5
 8000e58:	e008      	b.n	8000e6c <HAL_GPIO_Init+0x240>
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x240>
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e004      	b.n	8000e6c <HAL_GPIO_Init+0x240>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e002      	b.n	8000e6c <HAL_GPIO_Init+0x240>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x240>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	69fa      	ldr	r2, [r7, #28]
 8000e6e:	f002 0203 	and.w	r2, r2, #3
 8000e72:	0092      	lsls	r2, r2, #2
 8000e74:	4093      	lsls	r3, r2
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e7c:	4935      	ldr	r1, [pc, #212]	@ (8000f54 <HAL_GPIO_Init+0x328>)
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3302      	adds	r3, #2
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <HAL_GPIO_Init+0x354>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eae:	4a34      	ldr	r2, [pc, #208]	@ (8000f80 <HAL_GPIO_Init+0x354>)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb4:	4b32      	ldr	r3, [pc, #200]	@ (8000f80 <HAL_GPIO_Init+0x354>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed8:	4a29      	ldr	r2, [pc, #164]	@ (8000f80 <HAL_GPIO_Init+0x354>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ede:	4b28      	ldr	r3, [pc, #160]	@ (8000f80 <HAL_GPIO_Init+0x354>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f02:	4a1f      	ldr	r2, [pc, #124]	@ (8000f80 <HAL_GPIO_Init+0x354>)
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f08:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <HAL_GPIO_Init+0x354>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	@ (8000f80 <HAL_GPIO_Init+0x354>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3301      	adds	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	2b0f      	cmp	r3, #15
 8000f3c:	f67f ae84 	bls.w	8000c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3724      	adds	r7, #36	@ 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40013800 	.word	0x40013800
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	40020800 	.word	0x40020800
 8000f64:	40020c00 	.word	0x40020c00
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40021400 	.word	0x40021400
 8000f70:	40021800 	.word	0x40021800
 8000f74:	40021c00 	.word	0x40021c00
 8000f78:	40022000 	.word	0x40022000
 8000f7c:	40022400 	.word	0x40022400
 8000f80:	40013c00 	.word	0x40013c00

08000f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e267      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d075      	beq.n	800108e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fa2:	4b88      	ldr	r3, [pc, #544]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d00c      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fae:	4b85      	ldr	r3, [pc, #532]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d112      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fba:	4b82      	ldr	r3, [pc, #520]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fc6:	d10b      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc8:	4b7e      	ldr	r3, [pc, #504]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d05b      	beq.n	800108c <HAL_RCC_OscConfig+0x108>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d157      	bne.n	800108c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e242      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fe8:	d106      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x74>
 8000fea:	4b76      	ldr	r3, [pc, #472]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a75      	ldr	r2, [pc, #468]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e01d      	b.n	8001034 <HAL_RCC_OscConfig+0xb0>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x98>
 8001002:	4b70      	ldr	r3, [pc, #448]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a6f      	ldr	r2, [pc, #444]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	4b6d      	ldr	r3, [pc, #436]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a6c      	ldr	r2, [pc, #432]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e00b      	b.n	8001034 <HAL_RCC_OscConfig+0xb0>
 800101c:	4b69      	ldr	r3, [pc, #420]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a68      	ldr	r2, [pc, #416]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b66      	ldr	r3, [pc, #408]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a65      	ldr	r2, [pc, #404]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 800102e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d013      	beq.n	8001064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fce0 	bl	8000a00 <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001044:	f7ff fcdc 	bl	8000a00 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b64      	cmp	r3, #100	@ 0x64
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e207      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001056:	4b5b      	ldr	r3, [pc, #364]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f0      	beq.n	8001044 <HAL_RCC_OscConfig+0xc0>
 8001062:	e014      	b.n	800108e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fccc 	bl	8000a00 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800106c:	f7ff fcc8 	bl	8000a00 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b64      	cmp	r3, #100	@ 0x64
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e1f3      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107e:	4b51      	ldr	r3, [pc, #324]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0xe8>
 800108a:	e000      	b.n	800108e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d063      	beq.n	8001162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800109a:	4b4a      	ldr	r3, [pc, #296]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00b      	beq.n	80010be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010a6:	4b47      	ldr	r3, [pc, #284]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d11c      	bne.n	80010ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010b2:	4b44      	ldr	r3, [pc, #272]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d116      	bne.n	80010ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010be:	4b41      	ldr	r3, [pc, #260]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d005      	beq.n	80010d6 <HAL_RCC_OscConfig+0x152>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d001      	beq.n	80010d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e1c7      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d6:	4b3b      	ldr	r3, [pc, #236]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	4937      	ldr	r1, [pc, #220]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ea:	e03a      	b.n	8001162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d020      	beq.n	8001136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f4:	4b34      	ldr	r3, [pc, #208]	@ (80011c8 <HAL_RCC_OscConfig+0x244>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fa:	f7ff fc81 	bl	8000a00 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001102:	f7ff fc7d 	bl	8000a00 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e1a8      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f0      	beq.n	8001102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001120:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4925      	ldr	r1, [pc, #148]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001130:	4313      	orrs	r3, r2
 8001132:	600b      	str	r3, [r1, #0]
 8001134:	e015      	b.n	8001162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001136:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <HAL_RCC_OscConfig+0x244>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113c:	f7ff fc60 	bl	8000a00 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001144:	f7ff fc5c 	bl	8000a00 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e187      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001156:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	2b00      	cmp	r3, #0
 800116c:	d036      	beq.n	80011dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d016      	beq.n	80011a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_RCC_OscConfig+0x248>)
 8001178:	2201      	movs	r2, #1
 800117a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800117c:	f7ff fc40 	bl	8000a00 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001184:	f7ff fc3c 	bl	8000a00 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e167      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0x200>
 80011a2:	e01b      	b.n	80011dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a4:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <HAL_RCC_OscConfig+0x248>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011aa:	f7ff fc29 	bl	8000a00 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b0:	e00e      	b.n	80011d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b2:	f7ff fc25 	bl	8000a00 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d907      	bls.n	80011d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e150      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
 80011c4:	40023800 	.word	0x40023800
 80011c8:	42470000 	.word	0x42470000
 80011cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d0:	4b88      	ldr	r3, [pc, #544]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 80011d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1ea      	bne.n	80011b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 8097 	beq.w	8001318 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ee:	4b81      	ldr	r3, [pc, #516]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10f      	bne.n	800121a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b7d      	ldr	r3, [pc, #500]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	4a7c      	ldr	r2, [pc, #496]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	@ 0x40
 800120a:	4b7a      	ldr	r3, [pc, #488]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001216:	2301      	movs	r3, #1
 8001218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121a:	4b77      	ldr	r3, [pc, #476]	@ (80013f8 <HAL_RCC_OscConfig+0x474>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001222:	2b00      	cmp	r3, #0
 8001224:	d118      	bne.n	8001258 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001226:	4b74      	ldr	r3, [pc, #464]	@ (80013f8 <HAL_RCC_OscConfig+0x474>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a73      	ldr	r2, [pc, #460]	@ (80013f8 <HAL_RCC_OscConfig+0x474>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001232:	f7ff fbe5 	bl	8000a00 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123a:	f7ff fbe1 	bl	8000a00 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e10c      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124c:	4b6a      	ldr	r3, [pc, #424]	@ (80013f8 <HAL_RCC_OscConfig+0x474>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x2ea>
 8001260:	4b64      	ldr	r3, [pc, #400]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001264:	4a63      	ldr	r2, [pc, #396]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6713      	str	r3, [r2, #112]	@ 0x70
 800126c:	e01c      	b.n	80012a8 <HAL_RCC_OscConfig+0x324>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b05      	cmp	r3, #5
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0x30c>
 8001276:	4b5f      	ldr	r3, [pc, #380]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800127a:	4a5e      	ldr	r2, [pc, #376]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6713      	str	r3, [r2, #112]	@ 0x70
 8001282:	4b5c      	ldr	r3, [pc, #368]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001286:	4a5b      	ldr	r2, [pc, #364]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6713      	str	r3, [r2, #112]	@ 0x70
 800128e:	e00b      	b.n	80012a8 <HAL_RCC_OscConfig+0x324>
 8001290:	4b58      	ldr	r3, [pc, #352]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001294:	4a57      	ldr	r2, [pc, #348]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001296:	f023 0301 	bic.w	r3, r3, #1
 800129a:	6713      	str	r3, [r2, #112]	@ 0x70
 800129c:	4b55      	ldr	r3, [pc, #340]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 800129e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a0:	4a54      	ldr	r2, [pc, #336]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 80012a2:	f023 0304 	bic.w	r3, r3, #4
 80012a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d015      	beq.n	80012dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b0:	f7ff fba6 	bl	8000a00 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b6:	e00a      	b.n	80012ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b8:	f7ff fba2 	bl	8000a00 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e0cb      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ce:	4b49      	ldr	r3, [pc, #292]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 80012d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0ee      	beq.n	80012b8 <HAL_RCC_OscConfig+0x334>
 80012da:	e014      	b.n	8001306 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012dc:	f7ff fb90 	bl	8000a00 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e2:	e00a      	b.n	80012fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e4:	f7ff fb8c 	bl	8000a00 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e0b5      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fa:	4b3e      	ldr	r3, [pc, #248]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 80012fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1ee      	bne.n	80012e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d105      	bne.n	8001318 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800130c:	4b39      	ldr	r3, [pc, #228]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	4a38      	ldr	r2, [pc, #224]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80a1 	beq.w	8001464 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001322:	4b34      	ldr	r3, [pc, #208]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b08      	cmp	r3, #8
 800132c:	d05c      	beq.n	80013e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d141      	bne.n	80013ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001336:	4b31      	ldr	r3, [pc, #196]	@ (80013fc <HAL_RCC_OscConfig+0x478>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fb60 	bl	8000a00 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001344:	f7ff fb5c 	bl	8000a00 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e087      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001356:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69da      	ldr	r2, [r3, #28]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001370:	019b      	lsls	r3, r3, #6
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001378:	085b      	lsrs	r3, r3, #1
 800137a:	3b01      	subs	r3, #1
 800137c:	041b      	lsls	r3, r3, #16
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001384:	061b      	lsls	r3, r3, #24
 8001386:	491b      	ldr	r1, [pc, #108]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800138c:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <HAL_RCC_OscConfig+0x478>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fb35 	bl	8000a00 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff fb31 	bl	8000a00 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e05c      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x416>
 80013b8:	e054      	b.n	8001464 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ba:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <HAL_RCC_OscConfig+0x478>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fb1e 	bl	8000a00 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff fb1a 	bl	8000a00 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e045      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_RCC_OscConfig+0x470>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x444>
 80013e6:	e03d      	b.n	8001464 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d107      	bne.n	8001400 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e038      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40007000 	.word	0x40007000
 80013fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001400:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <HAL_RCC_OscConfig+0x4ec>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d028      	beq.n	8001460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001418:	429a      	cmp	r2, r3
 800141a:	d121      	bne.n	8001460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001426:	429a      	cmp	r2, r3
 8001428:	d11a      	bne.n	8001460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001430:	4013      	ands	r3, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001438:	4293      	cmp	r3, r2
 800143a:	d111      	bne.n	8001460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001446:	085b      	lsrs	r3, r3, #1
 8001448:	3b01      	subs	r3, #1
 800144a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800144c:	429a      	cmp	r2, r3
 800144e:	d107      	bne.n	8001460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800145a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0cc      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001488:	4b68      	ldr	r3, [pc, #416]	@ (800162c <HAL_RCC_ClockConfig+0x1b8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d90c      	bls.n	80014b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b65      	ldr	r3, [pc, #404]	@ (800162c <HAL_RCC_ClockConfig+0x1b8>)
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800149e:	4b63      	ldr	r3, [pc, #396]	@ (800162c <HAL_RCC_ClockConfig+0x1b8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d001      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0b8      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d020      	beq.n	80014fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c8:	4b59      	ldr	r3, [pc, #356]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4a58      	ldr	r2, [pc, #352]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e0:	4b53      	ldr	r3, [pc, #332]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4a52      	ldr	r2, [pc, #328]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ec:	4b50      	ldr	r3, [pc, #320]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	494d      	ldr	r1, [pc, #308]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d044      	beq.n	8001594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b47      	ldr	r3, [pc, #284]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d119      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e07f      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d003      	beq.n	8001532 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800152e:	2b03      	cmp	r3, #3
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001532:	4b3f      	ldr	r3, [pc, #252]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e06f      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001542:	4b3b      	ldr	r3, [pc, #236]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e067      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001552:	4b37      	ldr	r3, [pc, #220]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f023 0203 	bic.w	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4934      	ldr	r1, [pc, #208]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	4313      	orrs	r3, r2
 8001562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001564:	f7ff fa4c 	bl	8000a00 <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	e00a      	b.n	8001582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7ff fa48 	bl	8000a00 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e04f      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	4b2b      	ldr	r3, [pc, #172]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 020c 	and.w	r2, r3, #12
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	429a      	cmp	r2, r3
 8001592:	d1eb      	bne.n	800156c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001594:	4b25      	ldr	r3, [pc, #148]	@ (800162c <HAL_RCC_ClockConfig+0x1b8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d20c      	bcs.n	80015bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b22      	ldr	r3, [pc, #136]	@ (800162c <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015aa:	4b20      	ldr	r3, [pc, #128]	@ (800162c <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e032      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c8:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4916      	ldr	r1, [pc, #88]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015e6:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	490e      	ldr	r1, [pc, #56]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015fa:	f000 f821 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 80015fe:	4602      	mov	r2, r0
 8001600:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	490a      	ldr	r1, [pc, #40]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	5ccb      	ldrb	r3, [r1, r3]
 800160e:	fa22 f303 	lsr.w	r3, r2, r3
 8001612:	4a09      	ldr	r2, [pc, #36]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001616:	4b09      	ldr	r3, [pc, #36]	@ (800163c <HAL_RCC_ClockConfig+0x1c8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff f9ac 	bl	8000978 <HAL_InitTick>

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023c00 	.word	0x40023c00
 8001630:	40023800 	.word	0x40023800
 8001634:	08002260 	.word	0x08002260
 8001638:	20000000 	.word	0x20000000
 800163c:	20000004 	.word	0x20000004

08001640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001644:	b094      	sub	sp, #80	@ 0x50
 8001646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001658:	4b79      	ldr	r3, [pc, #484]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x200>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 030c 	and.w	r3, r3, #12
 8001660:	2b08      	cmp	r3, #8
 8001662:	d00d      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x40>
 8001664:	2b08      	cmp	r3, #8
 8001666:	f200 80e1 	bhi.w	800182c <HAL_RCC_GetSysClockFreq+0x1ec>
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x34>
 800166e:	2b04      	cmp	r3, #4
 8001670:	d003      	beq.n	800167a <HAL_RCC_GetSysClockFreq+0x3a>
 8001672:	e0db      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001674:	4b73      	ldr	r3, [pc, #460]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x204>)
 8001676:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001678:	e0db      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800167a:	4b73      	ldr	r3, [pc, #460]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x208>)
 800167c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800167e:	e0d8      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001680:	4b6f      	ldr	r3, [pc, #444]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x200>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001688:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800168a:	4b6d      	ldr	r3, [pc, #436]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x200>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d063      	beq.n	800175e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001696:	4b6a      	ldr	r3, [pc, #424]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x200>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	099b      	lsrs	r3, r3, #6
 800169c:	2200      	movs	r2, #0
 800169e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80016a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80016aa:	2300      	movs	r3, #0
 80016ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80016ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016b2:	4622      	mov	r2, r4
 80016b4:	462b      	mov	r3, r5
 80016b6:	f04f 0000 	mov.w	r0, #0
 80016ba:	f04f 0100 	mov.w	r1, #0
 80016be:	0159      	lsls	r1, r3, #5
 80016c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016c4:	0150      	lsls	r0, r2, #5
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4621      	mov	r1, r4
 80016cc:	1a51      	subs	r1, r2, r1
 80016ce:	6139      	str	r1, [r7, #16]
 80016d0:	4629      	mov	r1, r5
 80016d2:	eb63 0301 	sbc.w	r3, r3, r1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016e4:	4659      	mov	r1, fp
 80016e6:	018b      	lsls	r3, r1, #6
 80016e8:	4651      	mov	r1, sl
 80016ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ee:	4651      	mov	r1, sl
 80016f0:	018a      	lsls	r2, r1, #6
 80016f2:	4651      	mov	r1, sl
 80016f4:	ebb2 0801 	subs.w	r8, r2, r1
 80016f8:	4659      	mov	r1, fp
 80016fa:	eb63 0901 	sbc.w	r9, r3, r1
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800170a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800170e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001712:	4690      	mov	r8, r2
 8001714:	4699      	mov	r9, r3
 8001716:	4623      	mov	r3, r4
 8001718:	eb18 0303 	adds.w	r3, r8, r3
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	462b      	mov	r3, r5
 8001720:	eb49 0303 	adc.w	r3, r9, r3
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001732:	4629      	mov	r1, r5
 8001734:	024b      	lsls	r3, r1, #9
 8001736:	4621      	mov	r1, r4
 8001738:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800173c:	4621      	mov	r1, r4
 800173e:	024a      	lsls	r2, r1, #9
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001746:	2200      	movs	r2, #0
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800174a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800174c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001750:	f7fe fd4c 	bl	80001ec <__aeabi_uldivmod>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4613      	mov	r3, r2
 800175a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800175c:	e058      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175e:	4b38      	ldr	r3, [pc, #224]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x200>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	099b      	lsrs	r3, r3, #6
 8001764:	2200      	movs	r2, #0
 8001766:	4618      	mov	r0, r3
 8001768:	4611      	mov	r1, r2
 800176a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800176e:	623b      	str	r3, [r7, #32]
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
 8001774:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001778:	4642      	mov	r2, r8
 800177a:	464b      	mov	r3, r9
 800177c:	f04f 0000 	mov.w	r0, #0
 8001780:	f04f 0100 	mov.w	r1, #0
 8001784:	0159      	lsls	r1, r3, #5
 8001786:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800178a:	0150      	lsls	r0, r2, #5
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4641      	mov	r1, r8
 8001792:	ebb2 0a01 	subs.w	sl, r2, r1
 8001796:	4649      	mov	r1, r9
 8001798:	eb63 0b01 	sbc.w	fp, r3, r1
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017b0:	ebb2 040a 	subs.w	r4, r2, sl
 80017b4:	eb63 050b 	sbc.w	r5, r3, fp
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	00eb      	lsls	r3, r5, #3
 80017c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017c6:	00e2      	lsls	r2, r4, #3
 80017c8:	4614      	mov	r4, r2
 80017ca:	461d      	mov	r5, r3
 80017cc:	4643      	mov	r3, r8
 80017ce:	18e3      	adds	r3, r4, r3
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	464b      	mov	r3, r9
 80017d4:	eb45 0303 	adc.w	r3, r5, r3
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017e6:	4629      	mov	r1, r5
 80017e8:	028b      	lsls	r3, r1, #10
 80017ea:	4621      	mov	r1, r4
 80017ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017f0:	4621      	mov	r1, r4
 80017f2:	028a      	lsls	r2, r1, #10
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017fa:	2200      	movs	r2, #0
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	61fa      	str	r2, [r7, #28]
 8001800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001804:	f7fe fcf2 	bl	80001ec <__aeabi_uldivmod>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4613      	mov	r3, r2
 800180e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x200>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	0c1b      	lsrs	r3, r3, #16
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	3301      	adds	r3, #1
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001820:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001824:	fbb2 f3f3 	udiv	r3, r2, r3
 8001828:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800182a:	e002      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x204>)
 800182e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001834:	4618      	mov	r0, r3
 8001836:	3750      	adds	r7, #80	@ 0x50
 8001838:	46bd      	mov	sp, r7
 800183a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	00f42400 	.word	0x00f42400
 8001848:	007a1200 	.word	0x007a1200

0800184c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e041      	b.n	80018e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe ff9a 	bl	80007ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3304      	adds	r3, #4
 8001888:	4619      	mov	r1, r3
 800188a:	4610      	mov	r0, r2
 800188c:	f000 f9b8 	bl	8001c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d109      	bne.n	8001910 <HAL_TIM_PWM_Start+0x24>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b01      	cmp	r3, #1
 8001906:	bf14      	ite	ne
 8001908:	2301      	movne	r3, #1
 800190a:	2300      	moveq	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	e022      	b.n	8001956 <HAL_TIM_PWM_Start+0x6a>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b04      	cmp	r3, #4
 8001914:	d109      	bne.n	800192a <HAL_TIM_PWM_Start+0x3e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b01      	cmp	r3, #1
 8001920:	bf14      	ite	ne
 8001922:	2301      	movne	r3, #1
 8001924:	2300      	moveq	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	e015      	b.n	8001956 <HAL_TIM_PWM_Start+0x6a>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b08      	cmp	r3, #8
 800192e:	d109      	bne.n	8001944 <HAL_TIM_PWM_Start+0x58>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b01      	cmp	r3, #1
 800193a:	bf14      	ite	ne
 800193c:	2301      	movne	r3, #1
 800193e:	2300      	moveq	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	e008      	b.n	8001956 <HAL_TIM_PWM_Start+0x6a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b01      	cmp	r3, #1
 800194e:	bf14      	ite	ne
 8001950:	2301      	movne	r3, #1
 8001952:	2300      	moveq	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e07c      	b.n	8001a58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d104      	bne.n	800196e <HAL_TIM_PWM_Start+0x82>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800196c:	e013      	b.n	8001996 <HAL_TIM_PWM_Start+0xaa>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b04      	cmp	r3, #4
 8001972:	d104      	bne.n	800197e <HAL_TIM_PWM_Start+0x92>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800197c:	e00b      	b.n	8001996 <HAL_TIM_PWM_Start+0xaa>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b08      	cmp	r3, #8
 8001982:	d104      	bne.n	800198e <HAL_TIM_PWM_Start+0xa2>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800198c:	e003      	b.n	8001996 <HAL_TIM_PWM_Start+0xaa>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2202      	movs	r2, #2
 8001992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2201      	movs	r2, #1
 800199c:	6839      	ldr	r1, [r7, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fb84 	bl	80020ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001a60 <HAL_TIM_PWM_Start+0x174>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d004      	beq.n	80019b8 <HAL_TIM_PWM_Start+0xcc>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001a64 <HAL_TIM_PWM_Start+0x178>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_TIM_PWM_Start+0xd0>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_TIM_PWM_Start+0xd2>
 80019bc:	2300      	movs	r3, #0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a22      	ldr	r2, [pc, #136]	@ (8001a60 <HAL_TIM_PWM_Start+0x174>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d022      	beq.n	8001a22 <HAL_TIM_PWM_Start+0x136>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019e4:	d01d      	beq.n	8001a22 <HAL_TIM_PWM_Start+0x136>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001a68 <HAL_TIM_PWM_Start+0x17c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d018      	beq.n	8001a22 <HAL_TIM_PWM_Start+0x136>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a6c <HAL_TIM_PWM_Start+0x180>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_TIM_PWM_Start+0x136>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001a70 <HAL_TIM_PWM_Start+0x184>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00e      	beq.n	8001a22 <HAL_TIM_PWM_Start+0x136>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a16      	ldr	r2, [pc, #88]	@ (8001a64 <HAL_TIM_PWM_Start+0x178>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d009      	beq.n	8001a22 <HAL_TIM_PWM_Start+0x136>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a18      	ldr	r2, [pc, #96]	@ (8001a74 <HAL_TIM_PWM_Start+0x188>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d004      	beq.n	8001a22 <HAL_TIM_PWM_Start+0x136>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a16      	ldr	r2, [pc, #88]	@ (8001a78 <HAL_TIM_PWM_Start+0x18c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d111      	bne.n	8001a46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b06      	cmp	r3, #6
 8001a32:	d010      	beq.n	8001a56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a44:	e007      	b.n	8001a56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 0201 	orr.w	r2, r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40010000 	.word	0x40010000
 8001a64:	40010400 	.word	0x40010400
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40000800 	.word	0x40000800
 8001a70:	40000c00 	.word	0x40000c00
 8001a74:	40014000 	.word	0x40014000
 8001a78:	40001800 	.word	0x40001800

08001a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e0ae      	b.n	8001bf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	f200 809f 	bhi.w	8001be8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab0:	08001ae5 	.word	0x08001ae5
 8001ab4:	08001be9 	.word	0x08001be9
 8001ab8:	08001be9 	.word	0x08001be9
 8001abc:	08001be9 	.word	0x08001be9
 8001ac0:	08001b25 	.word	0x08001b25
 8001ac4:	08001be9 	.word	0x08001be9
 8001ac8:	08001be9 	.word	0x08001be9
 8001acc:	08001be9 	.word	0x08001be9
 8001ad0:	08001b67 	.word	0x08001b67
 8001ad4:	08001be9 	.word	0x08001be9
 8001ad8:	08001be9 	.word	0x08001be9
 8001adc:	08001be9 	.word	0x08001be9
 8001ae0:	08001ba7 	.word	0x08001ba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f92e 	bl	8001d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0208 	orr.w	r2, r2, #8
 8001afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0204 	bic.w	r2, r2, #4
 8001b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6999      	ldr	r1, [r3, #24]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	619a      	str	r2, [r3, #24]
      break;
 8001b22:	e064      	b.n	8001bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f97e 	bl	8001e2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6999      	ldr	r1, [r3, #24]
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	021a      	lsls	r2, r3, #8
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	619a      	str	r2, [r3, #24]
      break;
 8001b64:	e043      	b.n	8001bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68b9      	ldr	r1, [r7, #8]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 f9d3 	bl	8001f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0208 	orr.w	r2, r2, #8
 8001b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69da      	ldr	r2, [r3, #28]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0204 	bic.w	r2, r2, #4
 8001b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	69d9      	ldr	r1, [r3, #28]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	61da      	str	r2, [r3, #28]
      break;
 8001ba4:	e023      	b.n	8001bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 fa27 	bl	8002000 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69da      	ldr	r2, [r3, #28]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69da      	ldr	r2, [r3, #28]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	69d9      	ldr	r1, [r3, #28]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	021a      	lsls	r2, r3, #8
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	61da      	str	r2, [r3, #28]
      break;
 8001be6:	e002      	b.n	8001bee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	75fb      	strb	r3, [r7, #23]
      break;
 8001bec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a43      	ldr	r2, [pc, #268]	@ (8001d20 <TIM_Base_SetConfig+0x120>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d013      	beq.n	8001c40 <TIM_Base_SetConfig+0x40>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c1e:	d00f      	beq.n	8001c40 <TIM_Base_SetConfig+0x40>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a40      	ldr	r2, [pc, #256]	@ (8001d24 <TIM_Base_SetConfig+0x124>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d00b      	beq.n	8001c40 <TIM_Base_SetConfig+0x40>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d28 <TIM_Base_SetConfig+0x128>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d007      	beq.n	8001c40 <TIM_Base_SetConfig+0x40>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3e      	ldr	r2, [pc, #248]	@ (8001d2c <TIM_Base_SetConfig+0x12c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d003      	beq.n	8001c40 <TIM_Base_SetConfig+0x40>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d30 <TIM_Base_SetConfig+0x130>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d108      	bne.n	8001c52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a32      	ldr	r2, [pc, #200]	@ (8001d20 <TIM_Base_SetConfig+0x120>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d02b      	beq.n	8001cb2 <TIM_Base_SetConfig+0xb2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c60:	d027      	beq.n	8001cb2 <TIM_Base_SetConfig+0xb2>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a2f      	ldr	r2, [pc, #188]	@ (8001d24 <TIM_Base_SetConfig+0x124>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d023      	beq.n	8001cb2 <TIM_Base_SetConfig+0xb2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8001d28 <TIM_Base_SetConfig+0x128>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d01f      	beq.n	8001cb2 <TIM_Base_SetConfig+0xb2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a2d      	ldr	r2, [pc, #180]	@ (8001d2c <TIM_Base_SetConfig+0x12c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d01b      	beq.n	8001cb2 <TIM_Base_SetConfig+0xb2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8001d30 <TIM_Base_SetConfig+0x130>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d017      	beq.n	8001cb2 <TIM_Base_SetConfig+0xb2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a2b      	ldr	r2, [pc, #172]	@ (8001d34 <TIM_Base_SetConfig+0x134>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <TIM_Base_SetConfig+0xb2>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8001d38 <TIM_Base_SetConfig+0x138>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00f      	beq.n	8001cb2 <TIM_Base_SetConfig+0xb2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a29      	ldr	r2, [pc, #164]	@ (8001d3c <TIM_Base_SetConfig+0x13c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00b      	beq.n	8001cb2 <TIM_Base_SetConfig+0xb2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a28      	ldr	r2, [pc, #160]	@ (8001d40 <TIM_Base_SetConfig+0x140>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d007      	beq.n	8001cb2 <TIM_Base_SetConfig+0xb2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a27      	ldr	r2, [pc, #156]	@ (8001d44 <TIM_Base_SetConfig+0x144>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d003      	beq.n	8001cb2 <TIM_Base_SetConfig+0xb2>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a26      	ldr	r2, [pc, #152]	@ (8001d48 <TIM_Base_SetConfig+0x148>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d108      	bne.n	8001cc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a0e      	ldr	r2, [pc, #56]	@ (8001d20 <TIM_Base_SetConfig+0x120>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d003      	beq.n	8001cf2 <TIM_Base_SetConfig+0xf2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a10      	ldr	r2, [pc, #64]	@ (8001d30 <TIM_Base_SetConfig+0x130>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d103      	bne.n	8001cfa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	691a      	ldr	r2, [r3, #16]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f043 0204 	orr.w	r2, r3, #4
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	601a      	str	r2, [r3, #0]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40010000 	.word	0x40010000
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40000800 	.word	0x40000800
 8001d2c:	40000c00 	.word	0x40000c00
 8001d30:	40010400 	.word	0x40010400
 8001d34:	40014000 	.word	0x40014000
 8001d38:	40014400 	.word	0x40014400
 8001d3c:	40014800 	.word	0x40014800
 8001d40:	40001800 	.word	0x40001800
 8001d44:	40001c00 	.word	0x40001c00
 8001d48:	40002000 	.word	0x40002000

08001d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	f023 0201 	bic.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f023 0303 	bic.w	r3, r3, #3
 8001d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f023 0302 	bic.w	r3, r3, #2
 8001d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a20      	ldr	r2, [pc, #128]	@ (8001e24 <TIM_OC1_SetConfig+0xd8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d003      	beq.n	8001db0 <TIM_OC1_SetConfig+0x64>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a1f      	ldr	r2, [pc, #124]	@ (8001e28 <TIM_OC1_SetConfig+0xdc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d10c      	bne.n	8001dca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f023 0308 	bic.w	r3, r3, #8
 8001db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a15      	ldr	r2, [pc, #84]	@ (8001e24 <TIM_OC1_SetConfig+0xd8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d003      	beq.n	8001dda <TIM_OC1_SetConfig+0x8e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a14      	ldr	r2, [pc, #80]	@ (8001e28 <TIM_OC1_SetConfig+0xdc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d111      	bne.n	8001dfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	621a      	str	r2, [r3, #32]
}
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40010400 	.word	0x40010400

08001e2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	f023 0210 	bic.w	r2, r3, #16
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f023 0320 	bic.w	r3, r3, #32
 8001e76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a22      	ldr	r2, [pc, #136]	@ (8001f10 <TIM_OC2_SetConfig+0xe4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d003      	beq.n	8001e94 <TIM_OC2_SetConfig+0x68>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a21      	ldr	r2, [pc, #132]	@ (8001f14 <TIM_OC2_SetConfig+0xe8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d10d      	bne.n	8001eb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001eae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a17      	ldr	r2, [pc, #92]	@ (8001f10 <TIM_OC2_SetConfig+0xe4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d003      	beq.n	8001ec0 <TIM_OC2_SetConfig+0x94>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a16      	ldr	r2, [pc, #88]	@ (8001f14 <TIM_OC2_SetConfig+0xe8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d113      	bne.n	8001ee8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001ec6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001ece:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	621a      	str	r2, [r3, #32]
}
 8001f02:	bf00      	nop
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40010400 	.word	0x40010400

08001f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a21      	ldr	r2, [pc, #132]	@ (8001ff8 <TIM_OC3_SetConfig+0xe0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d003      	beq.n	8001f7e <TIM_OC3_SetConfig+0x66>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a20      	ldr	r2, [pc, #128]	@ (8001ffc <TIM_OC3_SetConfig+0xe4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d10d      	bne.n	8001f9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a16      	ldr	r2, [pc, #88]	@ (8001ff8 <TIM_OC3_SetConfig+0xe0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d003      	beq.n	8001faa <TIM_OC3_SetConfig+0x92>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a15      	ldr	r2, [pc, #84]	@ (8001ffc <TIM_OC3_SetConfig+0xe4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d113      	bne.n	8001fd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	621a      	str	r2, [r3, #32]
}
 8001fec:	bf00      	nop
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40010400 	.word	0x40010400

08002000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800202e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800204a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	031b      	lsls	r3, r3, #12
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <TIM_OC4_SetConfig+0xa4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d003      	beq.n	8002068 <TIM_OC4_SetConfig+0x68>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a11      	ldr	r2, [pc, #68]	@ (80020a8 <TIM_OC4_SetConfig+0xa8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d109      	bne.n	800207c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800206e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	621a      	str	r2, [r3, #32]
}
 8002096:	bf00      	nop
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40010400 	.word	0x40010400

080020ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2201      	movs	r2, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a1a      	ldr	r2, [r3, #32]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 031f 	and.w	r3, r3, #31
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	431a      	orrs	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	621a      	str	r2, [r3, #32]
}
 80020ea:	bf00      	nop
 80020ec:	371c      	adds	r7, #28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800210c:	2302      	movs	r3, #2
 800210e:	e05a      	b.n	80021c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a21      	ldr	r2, [pc, #132]	@ (80021d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d022      	beq.n	800219a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800215c:	d01d      	beq.n	800219a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1d      	ldr	r2, [pc, #116]	@ (80021d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d018      	beq.n	800219a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1b      	ldr	r2, [pc, #108]	@ (80021dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d013      	beq.n	800219a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a1a      	ldr	r2, [pc, #104]	@ (80021e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00e      	beq.n	800219a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a18      	ldr	r2, [pc, #96]	@ (80021e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d009      	beq.n	800219a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a17      	ldr	r2, [pc, #92]	@ (80021e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d004      	beq.n	800219a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a15      	ldr	r2, [pc, #84]	@ (80021ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d10c      	bne.n	80021b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40010000 	.word	0x40010000
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40000800 	.word	0x40000800
 80021e0:	40000c00 	.word	0x40000c00
 80021e4:	40010400 	.word	0x40010400
 80021e8:	40014000 	.word	0x40014000
 80021ec:	40001800 	.word	0x40001800

080021f0 <memset>:
 80021f0:	4402      	add	r2, r0
 80021f2:	4603      	mov	r3, r0
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d100      	bne.n	80021fa <memset+0xa>
 80021f8:	4770      	bx	lr
 80021fa:	f803 1b01 	strb.w	r1, [r3], #1
 80021fe:	e7f9      	b.n	80021f4 <memset+0x4>

08002200 <__libc_init_array>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	4d0d      	ldr	r5, [pc, #52]	@ (8002238 <__libc_init_array+0x38>)
 8002204:	4c0d      	ldr	r4, [pc, #52]	@ (800223c <__libc_init_array+0x3c>)
 8002206:	1b64      	subs	r4, r4, r5
 8002208:	10a4      	asrs	r4, r4, #2
 800220a:	2600      	movs	r6, #0
 800220c:	42a6      	cmp	r6, r4
 800220e:	d109      	bne.n	8002224 <__libc_init_array+0x24>
 8002210:	4d0b      	ldr	r5, [pc, #44]	@ (8002240 <__libc_init_array+0x40>)
 8002212:	4c0c      	ldr	r4, [pc, #48]	@ (8002244 <__libc_init_array+0x44>)
 8002214:	f000 f818 	bl	8002248 <_init>
 8002218:	1b64      	subs	r4, r4, r5
 800221a:	10a4      	asrs	r4, r4, #2
 800221c:	2600      	movs	r6, #0
 800221e:	42a6      	cmp	r6, r4
 8002220:	d105      	bne.n	800222e <__libc_init_array+0x2e>
 8002222:	bd70      	pop	{r4, r5, r6, pc}
 8002224:	f855 3b04 	ldr.w	r3, [r5], #4
 8002228:	4798      	blx	r3
 800222a:	3601      	adds	r6, #1
 800222c:	e7ee      	b.n	800220c <__libc_init_array+0xc>
 800222e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002232:	4798      	blx	r3
 8002234:	3601      	adds	r6, #1
 8002236:	e7f2      	b.n	800221e <__libc_init_array+0x1e>
 8002238:	08002278 	.word	0x08002278
 800223c:	08002278 	.word	0x08002278
 8002240:	08002278 	.word	0x08002278
 8002244:	0800227c 	.word	0x0800227c

08002248 <_init>:
 8002248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224a:	bf00      	nop
 800224c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800224e:	bc08      	pop	{r3}
 8002250:	469e      	mov	lr, r3
 8002252:	4770      	bx	lr

08002254 <_fini>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	bf00      	nop
 8002258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225a:	bc08      	pop	{r3}
 800225c:	469e      	mov	lr, r3
 800225e:	4770      	bx	lr
